
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 1.11
//  \   \         Application : Spartan-6 FPGA GTP Transceiver Wizard  
//  /   /         Filename : instantiation_template.v
// /___/   /\       
// \   \  /  \ 
//  \___\/\___\ 
//
//
// Instantiation Template
// Generated by Xilinx Spartan-6 FPGA GTP Transceiver Wizard
// 
// 
// (c) Copyright 2009 - 2011 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES. 


// Use the templates in this file to add the components generated by the wizard to your
// design. 

   
module s6_gtp_dual_wrapper (

  input        reset,
  
  input [3:0]  tx_is_kchar, 

  input [31:0] tx_data0,
  input [31:0] tx_data1,

  input [3:0]  tx_diffctrl,
  input [2:0]  tx_preemphasis,

  input refclk_p,
  input refclk_n, 
  
  output [1:0] tx_p, 
  output [1:0] tx_n, 

  output tx_clk80,

  output [1:0] reset_done

  ); 

  wire txusrclk;  // 320 MHz TXUSRCLK   = line rate (3200) / internal data width (10)
  wire txusrclk2; // 80  MHz TXUSERCLK2 = TXUSRCLK / 4

  assign tx_clk80 = txusrclk2; 

  wire [1:0] tile0_gtp_clkout0; 
  wire tile0_gtp_clkout0_bufio2; 
  wire [1:0] pllkdet; 

  //----------------------------------------------------------------------------------------------------
  // take the user out clock recovered from the pll in the gtp (TXOUTCLK) and pass it into a bufio2 
  //----------------------------------------------------------------------------------------------------

    BUFIO2 # (
        .DIVIDE                         (1),
        .DIVIDE_BYPASS                  ("TRUE")
    )
    gtp_bufio2
    (
        .I                              (tile0_gtp_clkout0[0]),
        .DIVCLK                         (tile0_gtp_clkout0_bufio2), .IOCLK                          (), .SERDESSTROBE                   ()
    );

  //----------------------------------------------------------------------------------------------------
  // use a CMT PLL to generate user clocks for fabric
  //----------------------------------------------------------------------------------------------------

  wire pll_fb_out; 
  wire pll_reset = ~pllkdet[0];

    MGT_USRCLK_SOURCE_PLL #
    (
        .MULT                           (8),
        .DIVIDE                         (1),
        .FEEDBACK                       ("CLKFBOUT"),
        .CLK_PERIOD                     (12.5),
        .OUT0_DIVIDE                    (4),
        .OUT1_DIVIDE                    (2),
        .OUT2_DIVIDE                    (1),
        .OUT3_DIVIDE                    (1)
    )
    gtpclkout0_0_pll0_i
    (
        .CLK0_OUT                       (txusrclk2),
        .CLK1_OUT                       (txusrclk),
        .CLK2_OUT                       (),
        .CLK3_OUT                       (),
        .CLK_IN                         (tile0_gtp_clkout0_bufio2),
        .CLKFB_IN                       (pll_fb_out),
        .CLKFB_OUT                      (pll_fb_out),
        .PLL_LOCKED_OUT                 (),
        .PLL_RESET_IN                   (pll_reset)
    );

  //----------------------------------------------------------------------------------------------------
  // ibufds for refclk
  //----------------------------------------------------------------------------------------------------

    wire refclk; 

    IBUFDS refclk_ibufds
    (
        .O                              (refclk),
        .I                              (refclk_p),
        .IB                             (refclk_n)
    );

    //--------------------------- The GTP Wrapper -----------------------------


    s6_gtpwizard_v1_11 #
    (
        .WRAPPER_SIM_GTPRESET_SPEEDUP   (0),      // Set this to 1 for simulation
        .WRAPPER_SIMULATION             (0)       // Set this to 1 for simulation
    )
    s6_gtpwizard_v1_11_i
    (
    
        //_____________________________________________________________________
        //_____________________________________________________________________
        //TILE0  (X0_Y1)
 
        //------------------------------- PLL Ports --------------------------------
        .TILE0_CLK00_IN                 (refclk),
        .TILE0_CLK01_IN                 (refclk),
        .TILE0_GTPRESET0_IN             (reset),
        .TILE0_GTPRESET1_IN             (reset),
        .TILE0_PLLLKDET0_OUT            (pllkdet[0]),
        .TILE0_PLLLKDET1_OUT            (pllkdet[1]),
        .TILE0_RESETDONE0_OUT           (reset_done[0]),
        .TILE0_RESETDONE1_OUT           (reset_done[1]),
        //----------------- Receive Ports - RX Data Path interface -----------------
        .TILE0_RXUSRCLK0_IN             (txusrclk),
        .TILE0_RXUSRCLK1_IN             (txusrclk),
        .TILE0_RXUSRCLK20_IN            (txusrclk2),
        .TILE0_RXUSRCLK21_IN            (txusrclk2),
        //----- Receive Ports - RX Driver,OOB signalling,Coupling and Eq.,CDR ------
        .TILE0_RXEQMIX0_IN              (2'b00),
        .TILE0_RXEQMIX1_IN              (2'b00),
        //-------------------------- TX/RX Datapath Ports --------------------------
        .TILE0_GTPCLKOUT0_OUT           (tile0_gtp_clkout0),
        .TILE0_GTPCLKOUT1_OUT           (),
        //----------------- Transmit Ports - 8b10b Encoder Control -----------------
        .TILE0_TXCHARISK0_IN            (tx_is_kchar),
        .TILE0_TXCHARISK1_IN            (tx_is_kchar),
        //---------------- Transmit Ports - TX Data Path interface -----------------
        .TILE0_TXDATA0_IN               (tx_data0),
        .TILE0_TXDATA1_IN               (tx_data1),
        .TILE0_TXUSRCLK0_IN             (txusrclk),
        .TILE0_TXUSRCLK1_IN             (txusrclk),
        .TILE0_TXUSRCLK20_IN            (txusrclk2),
        .TILE0_TXUSRCLK21_IN            (txusrclk2),
        //------------- Transmit Ports - TX Driver and OOB signalling --------------
        .TILE0_TXDIFFCTRL0_IN           (tx_diffctrl[3:0]),
        .TILE0_TXDIFFCTRL1_IN           (tx_diffctrl[3:0]),
        .TILE0_TXN0_OUT                 (tx_n[0]),
        .TILE0_TXN1_OUT                 (tx_n[1]),
        .TILE0_TXP0_OUT                 (tx_p[0]),
        .TILE0_TXP1_OUT                 (tx_p[1]),
        .TILE0_TXPREEMPHASIS0_IN        (tx_preemphasis[2:0]),
        .TILE0_TXPREEMPHASIS1_IN        (tx_preemphasis[2:0])


    );
    
  endmodule 
